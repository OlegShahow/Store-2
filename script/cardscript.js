
// ............................. –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ .............................................................................
//  ...........  –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∞–π—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä !!!!!!!!


// —Ç–∞–∫ –∂–µ  - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É !!!!

// =======================================
// –ù–∞—Ö–æ–¥–∏–º —Ñ–æ—Ä–º—É –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
// =======================================
const form = document.getElementById("add-card-form");
const cardsContainer = document.querySelector(".main__cards");

// =======================================
// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ —Å —Å–µ—Ä–≤–µ—Ä–∞ (—Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π "—Å–ø—è—â–µ–≥–æ" —Å–µ—Ä–≤–µ—Ä–∞)
// =======================================
async function getCards() {
	try {
		console.log("üîÑ –ó–∞–ø—Ä–æ—Å –∫–∞—Ä—Ç–æ—á–µ–∫... (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 60 —Å–µ–∫—É–Ω–¥)");

		// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è "–ø—Ä–æ—Å—ã–ø–∞—é—â–µ–≥–æ—Å—è" —Å–µ—Ä–≤–µ—Ä–∞ Render
		const controller = new AbortController();
		const timeoutId = setTimeout(() => controller.abort(), 60000);

		const response = await fetch("/api/cards", {
			signal: controller.signal
		});

		clearTimeout(timeoutId);

		if (!response.ok) {
			const errorText = await response.text();
			throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} - ${errorText}`);
		}

		const cards = await response.json();
		console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${cards.length} –∫–∞—Ä—Ç–æ—á–µ–∫`);
		return cards;

	} catch (err) {
		if (err.name === 'AbortError') {
			console.error("‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞: —Å–µ—Ä–≤–µ—Ä –¥–æ–ª–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (–≤–æ–∑–º–æ–∂–Ω–æ, '—Å–ø–∏—Ç')");
			alert("–°–µ—Ä–≤–µ—Ä –ø—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥.");
		} else {
			console.error("‚ùå getCards Error:", err);
		}
		return [];
	}
}

// =======================================
// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –û–î–ù–û–ô –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
// =======================================
async function addCard(cardData) {
	try {
		console.log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏...");

		const formData = new FormData();
		formData.append('name', cardData.name);
		formData.append('price', cardData.price);
		formData.append('description', cardData.description || '');
		formData.append('availability', cardData.availability || '–í –Ω–∞–ª–∏—á–∏–∏');
		// –î–û–ë–ê–í–õ–ï–ù–û: –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞—Ç—Ä–∞—Ç–∞—Ö
		formData.append('cost', cardData.cost || '');

		if (cardData.photoFile) {
			formData.append('photo', cardData.photoFile);
		}

		// –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
		const controller = new AbortController();
		const timeoutId = setTimeout(() => controller.abort(), 120000);

		const response = await fetch("/api/cards", {
			method: "POST",
			body: formData,
			signal: controller.signal
		});

		clearTimeout(timeoutId);

		if (!response.ok) {
			const errorData = await response.json();
			throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} - ${JSON.stringify(errorData)}`);
		}

		const result = await response.json();
		console.log("‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞, ID:", result.id || result._id);
		return result;

	} catch (err) {
		if (err.name === 'AbortError') {
			console.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è");
			throw new Error("–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
		}
		console.error("‚ùå addCard Error:", err);
		throw err;
	}
}

// =======================================
// –£–¥–∞–ª–µ–Ω–∏–µ –û–î–ù–û–ô –∫–∞—Ä—Ç–æ—á–∫–∏
// =======================================
async function deleteCard(cardId) {
	try {
		const response = await fetch(`/api/cards/${cardId}`, {
			method: "DELETE"
		});

		if (!response.ok) {
			throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
		}

		console.log("üóëÔ∏è –ö–∞—Ä—Ç–æ—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞, ID:", cardId);
		return await response.json();

	} catch (err) {
		console.error("‚ùå deleteCard Error:", err);
		throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä");
	}
}

// =======================================
// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –û–î–ù–û–ô –∫–∞—Ä—Ç–æ—á–∫–∏
// =======================================
async function updateCardStatus(cardId, newStatus) {
	try {
		const response = await fetch(`/api/cards/${cardId}`, {
			method: "PUT",
			headers: { "Content-Type": "application/json" },
			body: JSON.stringify({ availability: newStatus })
		});

		if (!response.ok) {
			throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
		}

		console.log("üîÑ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω, ID:", cardId);
		return await response.json();

	} catch (err) {
		console.error("‚ùå updateCardStatus Error:", err);
		throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å");
	}
}

// =======================================
// –§—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∞ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
// =======================================
function renderCard(card) {
	const cardId = card.id || card._id; // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ id –∏ _id
	const newCard = document.createElement("div");
	newCard.classList.add("item--card");
	newCard.dataset.id = cardId;

	// –î–û–ë–ê–í–õ–ï–ù–û: data-–∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ—Ä–∑–∏–Ω—É
	newCard.innerHTML = `
    <div class="item--info">
	    <div class="description">
		   <p>${card.description || ""}</p>
		</div>
        <div class="info--public">
		   <div class="item--foto adds">
		      <img src="${card.imgSrc}" alt="${card.name}" onerror="this.style.display='none'">
		   </div>
            <div class="item--name adds"><p>${card.name}</p></div>

			<div class="item--sbor">


               <div class="item--trio">

                    <div class="item--prize adds">
                          <p>${card.price}</p> <img src="./icon/g1.png" alt="@">
                          <!-- –î–û–ë–ê–í–õ–ï–ù–û: –±–ª–æ–∫ —Å –∑–∞—Ç—Ä–∞—Ç–∞–º–∏ -->
                         <div class="cost"><p>–ó–∞—Ç—Ä–∞—Ç—ã ${card.cost || ''}</p></div>
                    </div>
           
           
                    <div class="item--availability adds">${card.availability}</div>

                        <div class="item--about adds">
                           <button class="ab">–û —Ç–æ–≤–∞—Ä–µ</button>
                        </div>

		       </div>			  
					  
                 <div class="item--korzina">
                       <!-- –ò–ó–ú–ï–ù–ï–ù–û: —É–±—Ä–∞–Ω–∞ —Å—Å—ã–ª–∫–∞, –¥–æ–±–∞–≤–ª–µ–Ω—ã data-–∞—Ç—Ä–∏–±—É—Ç—ã -->
                       <button type="button" class="korz--btn" 
                           data-id="${cardId}" 
                           data-name="${card.name}" 
                           data-price="${card.price}" 
                           data-img="${card.imgSrc}">
                           <img src="./icon/k2.png" alt="–ö–æ—Ä–∑–∏–Ω–∞">
                         </button>
                 </div>
				   
			  </div>
			  
        </div>


        <div class="info--admin">
            <div class="admin--delite"><button class="del">–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä</button></div>
            <div class="admin--status"><button class="stat">–°—Ç–∞—Ç—É—Å</button></div>
            <div class="admin--date"><p>–†–∞–∑–º–µ—â–µ–Ω–æ <br> ${card.date}</p></div>
        </div>
    </div>
    `;

	cardsContainer.appendChild(newCard);

	// –ö–Ω–æ–ø–∫–∞ "–û —Ç–æ–≤–∞—Ä–µ"
	const abButton = newCard.querySelector(".ab");
	const description = newCard.querySelector(".description");
	abButton.addEventListener("click", () => {
		description.style.display = description.style.display === "flex" ? "none" : "flex";
	});

	// –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
	const delButton = newCard.querySelector(".del");
	delButton.addEventListener("click", async () => {
		if (confirm("–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?")) {
			try {
				await deleteCard(cardId);
				newCard.remove();
			} catch (err) {
				alert(err.message);
			}
		}
	});

	// –ö–Ω–æ–ø–∫–∞ "–°—Ç–∞—Ç—É—Å"
	const statButton = newCard.querySelector(".stat");
	const availabilityElement = newCard.querySelector(".item--availability");
	statButton.addEventListener("click", async () => {
		try {
			const newStatus = card.availability === "–í –Ω–∞–ª–∏—á–∏–∏" ? "–í –¥–æ—Ä–æ–≥–µ" : "–í –Ω–∞–ª–∏—á–∏–∏";
			await updateCardStatus(cardId, newStatus);
			availabilityElement.textContent = newStatus;
			card.availability = newStatus;
		} catch (err) {
			alert(err.message);
		}
	});

	// –î–û–ë–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
	const korzBtn = newCard.querySelector('.korz--btn');
	korzBtn.addEventListener('click', function (e) {
		e.preventDefault();
		e.stopPropagation(); // –í–∞–∂–Ω–æ: –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è

		const productData = {
			id: this.dataset.id,
			name: this.dataset.name,
			price: this.dataset.price,
			img: this.dataset.img
		};

		addToCart(productData);
	});
}

// =======================================
// –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
// =======================================
async function loadAllCards() {
	try {
		console.log("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫...");
		const cards = await getCards();
		console.log("üì¶ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏:", cards); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
		cardsContainer.innerHTML = '';

		if (cards.length === 0) {
			console.log("‚ÑπÔ∏è –ö–∞—Ä—Ç–æ—á–µ–∫ –Ω–µ—Ç");
			cardsContainer.innerHTML = '<div class="empty-state">–¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</div>';
		} else {
			cards.forEach(card => renderCard(card));
			console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${cards.length} –∫–∞—Ä—Ç–æ—á–µ–∫`);
		}
	} catch (err) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç–æ—á–µ–∫:", err);
		cardsContainer.innerHTML = '<div class="empty-state">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤</div>';
	}
}

// =======================================
// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
// =======================================
form.addEventListener("submit", async (event) => {
	event.preventDefault();

	const submitButton = form.querySelector('button[type="submit"]');
	const originalText = submitButton.textContent;
	submitButton.textContent = "–î–æ–±–∞–≤–ª—è–µ–º...";
	submitButton.disabled = true;

	try {
		const name = form.name.value.trim();
		const price = form.price.value.trim();
		const desc = form.desc.value.trim();
		const availability = form.availability.value.trim() || "–í –Ω–∞–ª–∏—á–∏–∏";
		const cost = form.cost ? form.cost.value.trim() : ''; // –î–û–ë–ê–í–õ–ï–ù–û: –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç
		const file = form.photo.files[0];

		if (!name || !price) {
			alert("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω—É!");
			return;
		}

		if (!file) {
			alert("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞!");
			return;
		}

		const newCard = await addCard({
			name,
			price,
			description: desc,
			availability,
			cost, // –î–û–ë–ê–í–õ–ï–ù–û: –ø–µ—Ä–µ–¥–∞—á–∞ –∑–∞—Ç—Ä–∞—Ç
			photoFile: file
		});

		renderCard(newCard);
		form.reset();
		alert("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!");

	} catch (err) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:", err);
		alert("–û—à–∏–±–∫–∞: " + err.message);
	} finally {
		submitButton.textContent = originalText;
		submitButton.disabled = false;
	}
});

// =======================================
// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
// =======================================
function addToCart(productData) {
	try {
		console.log("üõí –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É:", productData);

		// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ—Ä–∑–∏–Ω—É –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é
		let cart = JSON.parse(localStorage.getItem('cart')) || [];

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
		const existingItemIndex = cart.findIndex(item => item.id === productData.id);

		if (existingItemIndex > -1) {
			// –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –µ—Å—Ç—å - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
			cart[existingItemIndex].quantity += 1;
			console.log("‚ûï –£–≤–µ–ª–∏—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ");
		} else {
			// –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
			cart.push({
				id: productData.id,
				name: productData.name,
				price: productData.price,
				img: productData.img,
				quantity: 1
			});
			console.log("‚úÖ –ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É");
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É –≤ localStorage
		localStorage.setItem('cart', JSON.stringify(cart));

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		showCartNotification('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!');

	} catch (err) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É:', err);
		showCartNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É', 'error');
	}
}

// =======================================
// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–æ—Ä–∑–∏–Ω–µ
// =======================================
function showCartNotification(message, type = 'success') {
	// –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
	let notificationContainer = document.getElementById('cart-notifications');
	if (!notificationContainer) {
		notificationContainer = document.createElement('div');
		notificationContainer.id = 'cart-notifications';
		notificationContainer.style.cssText = `
			position: fixed;
			top: 20px;
			right: 20px;
			z-index: 10000;
			display: flex;
			flex-direction: column;
			gap: 10px;
		`;
		document.body.appendChild(notificationContainer);
	}

	// –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
	const notification = document.createElement('div');
	notification.textContent = message;
	notification.style.cssText = `
		background: ${type === 'success' ? '#4CAF50' : '#f44336'};
		color: white;
		padding: 12px 20px;
		border-radius: 6px;
		box-shadow: 0 4px 12px rgba(0,0,0,0.15);
		font-family: Arial, sans-serif;
		font-size: 18px;
		opacity: 0;
		transform: translateX(100%);
		transition: all 0.3s ease;
	`;

	notificationContainer.appendChild(notification);

	// –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
	setTimeout(() => {
		notification.style.opacity = '1';
		notification.style.transform = 'translateX(0)';
	}, 10);

	// –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥—ã —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
	setTimeout(() => {
		notification.style.opacity = '0';
		notification.style.transform = 'translateX(100%)';

		setTimeout(() => {
			notification.remove();
			if (notificationContainer.children.length === 0) {
				notificationContainer.remove();
			}
		}, 300);
	}, 5000);
}

// =======================================
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
// =======================================
document.addEventListener('DOMContentLoaded', () => {
	console.log("üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...");
	loadAllCards();

	// –î–û–ë–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä–∑–∏–Ω—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
	if (localStorage.getItem('cart')) {
		console.log("üõí –ö–æ—Ä–∑–∏–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ localStorage");
	} else {
		console.log("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞");
	}
});

console.log("‚ú® Frontend JavaScript –∑–∞–≥—Ä—É–∂–µ–Ω!");

// =======================================
// –î–ï–õ–ê–ï–ú –§–£–ù–ö–¶–ò–ò –ì–õ–û–ë–ê–õ–¨–ù–´–ú–ò –î–õ–Ø –û–¢–õ–ê–î–ö–ò
// =======================================
window.loadAllCards = loadAllCards;
window.getCards = getCards;
window.renderCard = renderCard;
window.addCard = addCard;
window.deleteCard = deleteCard;
// –î–û–ë–ê–í–õ–ï–ù–û: –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ—Ä–∑–∏–Ω–æ–π
window.addToCart = addToCart;
window.showCartNotification = showCartNotification;