// const express = require("express");
// const path = require("path");
// const mongoose = require("mongoose");
// const multer = require("multer");
// const cloudinary = require("cloudinary").v2;
// const { CloudinaryStorage } = require("multer-storage-cloudinary");
// const cors = require("cors");

// const app = express();
// const PORT = process.env.PORT || 3000;

// // =======================================
// // –ú–æ–¥–µ–ª—å Mongoose –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
// // =======================================
// const cardSchema = new mongoose.Schema({
// 	name: { type: String, required: true },
// 	price: { type: String, required: true },
// 	cost: { type: String }, // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: –ø–æ–ª–µ –∑–∞—Ç—Ä–∞—Ç
// 	description: String,
// 	availability: { type: String, default: '–í –Ω–∞–ª–∏—á–∏–∏' },
// 	imgSrc: String,
// 	date: { type: String, default: () => new Date().toISOString().split('T')[0] }
// }, {
// 	timestamps: true
// });

// const Card = mongoose.model('Card', cardSchema);

// // =======================================
// // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Cloudinary
// // =======================================
// cloudinary.config({
// 	cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
// 	api_key: process.env.CLOUDINARY_API_KEY,
// 	api_secret: process.env.CLOUDINARY_API_SECRET,
// });

// console.log("üîë Cloudinary –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è:", process.env.CLOUDINARY_CLOUD_NAME);

// // =======================================
// // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Multer + Cloudinary –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
// // =======================================
// const storage = new CloudinaryStorage({
// 	cloudinary: cloudinary,
// 	params: {
// 		folder: "my-online-store",
// 		allowed_formats: ["jpg", "jpeg", "png", "gif", "webp"], // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: webp —Ñ–æ—Ä–º–∞—Ç
// 		transformation: [{ width: 800, height: 600, crop: "limit" }]
// 	},
// });

// const upload = multer({
// 	storage: storage,
// 	fileFilter: (req, file, cb) => {
// 		if (file.mimetype.startsWith('image/')) {
// 			cb(null, true);
// 		} else {
// 			cb(new Error('–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!'), false);
// 		}
// 	},
// 	limits: {
// 		fileSize: 10 * 1024 * 1024 // 10MB - —Ä–∞–∑–º–µ—Ä –º–∞–∫—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
// 	}
// });

// // =======================================
// // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
// // =======================================
// async function connectMongoDB() {
// 	try {
// 		if (!process.env.MONGODB_URI) {
// 			throw new Error("MONGODB_URI –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
// 		}

// 		await mongoose.connect(process.env.MONGODB_URI);
// 		console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ");
// 		console.log(`   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${mongoose.connection.db?.databaseName}`);

// 	} catch (err) {
// 		console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:", err.message);
// 		throw err;
// 	}
// }

// // =======================================
// // Middleware
// // =======================================
// app.use(cors());
// app.use(express.json({ limit: '10mb' }));
// app.use(express.static(path.join(__dirname)));

// // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
// app.use((req, res, next) => {
// 	console.log(`${new Date().toISOString()} ${req.method} ${req.path}`);
// 	next();
// });

// // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ Multer
// app.use((error, req, res, next) => {
// 	if (error instanceof multer.MulterError) {
// 		if (error.code === 'LIMIT_FILE_SIZE') {
// 			return res.status(400).json({ error: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å. 5MB)' });
// 		}
// 	}
// 	next(error);
// });

// // =======================================
// // API –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ (MongoDB)
// // =======================================

// // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
// app.get("/api/cards", async (req, res) => {
// 	try {
// 		console.log("üì• –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ MongoDB");
// 		const cards = await Card.find().sort({ createdAt: -1 });
// 		console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${cards.length} –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ MongoDB`);
// 		res.json(cards);
// 	} catch (err) {
// 		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ MongoDB:", err);
// 		res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫" });
// 	}
// });

// // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –û–î–ù–û–ô –∫–∞—Ä—Ç–æ—á–∫–∏
// app.post("/api/cards", upload.single('photo'), async (req, res) => {
// 	console.log("üì¶ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ MongoDB");

// 	try {
// 		const { name, price, cost, description, availability } = req.body; // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: cost

// 		if (!name || !price) {
// 			return res.status(400).json({ error: "–ù–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
// 		}

// 		let imageUrl = '';

// 		if (req.file) {
// 			imageUrl = req.file.path;
// 			console.log("‚úÖ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ Cloudinary:", imageUrl);
// 		}

// 		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MongoDB!
// 		const newCard = new Card({
// 			name: name.toString().trim(),
// 			price: price.toString().trim(),
// 			cost: (cost || '').toString().trim(), // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: –ø–æ–ª–µ –∑–∞—Ç—Ä–∞—Ç
// 			description: (description || '').toString().trim(),
// 			availability: (availability || '–í –Ω–∞–ª–∏—á–∏–∏').toString().trim(),
// 			imgSrc: imageUrl
// 		});

// 		await newCard.save();
// 		console.log("‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ MongoDB, ID:", newCard._id);

// 		res.status(201).json(newCard);
// 	} catch (err) {
// 		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ MongoDB:", err);
// 		res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏" });
// 	}
// });

// // –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
// app.delete("/api/cards/:id", async (req, res) => {
// 	const { id } = req.params;

// 	try {
// 		if (!mongoose.Types.ObjectId.isValid(id)) {
// 			return res.status(400).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π ID –∫–∞—Ä—Ç–æ—á–∫–∏" });
// 		}

// 		const deletedCard = await Card.findByIdAndDelete(id);

// 		if (!deletedCard) {
// 			return res.status(404).json({ error: "–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
// 		}

// 		console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ ID: ${id}`);
// 		res.json({ status: "deleted", id: id });

// 	} catch (err) {
// 		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ MongoDB:", err);
// 		res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏" });
// 	}
// });

// // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
// app.put("/api/cards/:id", async (req, res) => {
// 	const { id } = req.params;
// 	const { name, price, cost, description, availability } = req.body; // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: cost

// 	try {
// 		if (!mongoose.Types.ObjectId.isValid(id)) {
// 			return res.status(400).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π ID –∫–∞—Ä—Ç–æ—á–∫–∏" });
// 		}

// 		const updatedCard = await Card.findByIdAndUpdate(
// 			id,
// 			{
// 				name,
// 				price,
// 				cost, // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: –ø–æ–ª–µ –∑–∞—Ç—Ä–∞—Ç
// 				description,
// 				availability,
// 				updatedAt: new Date()
// 			},
// 			{ new: true, runValidators: true }
// 		);

// 		if (!updatedCard) {
// 			return res.status(404).json({ error: "–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
// 		}

// 		console.log(`‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ ID: ${id}`);
// 		res.json(updatedCard);

// 	} catch (err) {
// 		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ MongoDB:", err);
// 		res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏" });
// 	}
// });

// // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ ID
// app.get("/api/cards/:id", async (req, res) => {
// 	const { id } = req.params;

// 	try {
// 		if (!mongoose.Types.ObjectId.isValid(id)) {
// 			return res.status(400).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π ID –∫–∞—Ä—Ç–æ—á–∫–∏" });
// 		}

// 		const card = await Card.findById(id);

// 		if (!card) {
// 			return res.status(404).json({ error: "–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
// 		}

// 		res.json(card);

// 	} catch (err) {
// 		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ MongoDB:", err);
// 		res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏" });
// 	}
// });

// // =======================================
// // API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –Ω–∞ Cloudinary
// // =======================================
// app.post("/api/upload", upload.single("photo"), async (req, res) => {
// 	console.log("üì∏ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ");

// 	try {
// 		if (!req.file) {
// 			console.error("‚ùå –§–∞–π–ª –Ω–µ –ø–æ–ª—É—á–µ–Ω");
// 			return res.status(400).json({ error: "–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω" });
// 		}

// 		console.log("‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω:", req.file.originalname);
// 		console.log("‚úÖ URL Cloudinary:", req.file.path);

// 		res.json({
// 			success: true,
// 			url: req.file.path,
// 			message: "–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"
// 		});

// 	} catch (err) {
// 		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:", err);
// 		res.status(500).json({
// 			error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ",
// 			message: err.message
// 		});
// 	}
// });

// // =======================================
// // Health check endpoint
// // =======================================
// app.get("/api/health", async (req, res) => {
// 	try {
// 		// –ü—Ä–æ–≤–µ—Ä—è–µ–º MongoDB
// 		await mongoose.connection.db.admin().ping();

// 		res.json({
// 			status: "OK",
// 			mongodb: "connected",
// 			timestamp: new Date().toISOString()
// 		});
// 	} catch (err) {
// 		res.status(500).json({
// 			status: "ERROR",
// 			error: err.message,
// 			timestamp: new Date().toISOString()
// 		});
// 	}
// });

// // =======================================
// // –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
// // =======================================
// app.use((req, res) => {
// 	console.warn(`‚ö†Ô∏è  –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${req.method} ${req.url}`);
// 	res.status(404).json({ error: "–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
// });

// // =======================================
// // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
// // =======================================
// app.use((err, req, res, next) => {
// 	console.error("üî• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:", err);
// 	res.status(500).json({
// 		error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
// 		message: process.env.NODE_ENV === 'development' ? err.message : 'Something went wrong'
// 	});
// });

// // =======================================
// // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
// // =======================================
// async function startServer() {
// 	try {
// 		// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
// 		await connectMongoDB();

// 		console.log("‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ");

// 		// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–¢–†–û–ö–ê
// 		app.listen(process.env.PORT || PORT, '0.0.0.0', () => {
// 			console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${process.env.PORT || PORT}`);
// 			console.log(`üìä Health check: http://localhost:${process.env.PORT || PORT}/api/health`);
// 		});

// 	} catch (err) {
// 		console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä:", err);
// 		process.exit(1);
// 	}
// }

// // =======================================
// // Graceful shutdown
// // =======================================
// async function gracefulShutdown() {
// 	console.log('\nüîª –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...');

// 	try {
// 		// –ó–∞–∫—Ä—ã–≤–∞–µ–º MongoDB
// 		await mongoose.connection.close();
// 		console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –∑–∞–∫—Ä—ã—Ç–æ');

// 		process.exit(0);
// 	} catch (err) {
// 		console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã:', err);
// 		process.exit(1);
// 	}
// }

// process.on('SIGINT', gracefulShutdown);
// process.on('SIGTERM', gracefulShutdown);

// // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
// startServer();

const express = require("express");
const path = require("path");
const mongoose = require("mongoose");
const multer = require("multer");
const cloudinary = require("cloudinary").v2;
const { CloudinaryStorage } = require("multer-storage-cloudinary");
const cors = require("cors");

const app = express();
const PORT = process.env.PORT || 3000;

// =======================================
// –ú–æ–¥–µ–ª—å Mongoose –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
// =======================================
const cardSchema = new mongoose.Schema({
	name: { type: String, required: true },
	price: {
		type: String,
		required: true,
		// –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è price (—á–∏—Å–ª–æ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å —á–∏—Å–ª–æ–º)
		match: [/^\d+(\.\d{1,2})?$/, '–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100 –∏–ª–∏ 100.00)']
	},
	cost: { type: String }, // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: –ø–æ–ª–µ –∑–∞—Ç—Ä–∞—Ç
	description: String,
	availability: { type: String, default: '–í –Ω–∞–ª–∏—á–∏–∏' },
	imgSrc: String,
	date: { type: String, default: () => new Date().toISOString().split('T')[0] }
}, {
	timestamps: true
});

const Card = mongoose.model('Card', cardSchema);

// =======================================
// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Cloudinary
// =======================================
cloudinary.config({
	cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
	api_key: process.env.CLOUDINARY_API_KEY,
	api_secret: process.env.CLOUDINARY_API_SECRET,
});

console.log("üîë Cloudinary –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è:", process.env.CLOUDINARY_CLOUD_NAME);

// =======================================
// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Multer + Cloudinary –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
// =======================================
const storage = new CloudinaryStorage({
	cloudinary: cloudinary,
	params: {
		folder: "my-online-store",
		allowed_formats: ["jpg", "jpeg", "png", "gif", "webp"], // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: webp —Ñ–æ—Ä–º–∞—Ç
		transformation: [{ width: 800, height: 600, crop: "limit" }]
	},
});

const upload = multer({
	storage: storage,
	fileFilter: (req, file, cb) => {
		if (file.mimetype.startsWith('image/')) {
			cb(null, true);
		} else {
			cb(new Error('–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!'), false);
		}
	},
	limits: {
		fileSize: 10 * 1024 * 1024 // 10MB - —Ä–∞–∑–º–µ—Ä –º–∞–∫—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
	}
});

// =======================================
// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
// =======================================
async function connectMongoDB() {
	try {
		if (!process.env.MONGODB_URI) {
			throw new Error("MONGODB_URI –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
		}

		await mongoose.connect(process.env.MONGODB_URI);
		console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ");
		console.log(`   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${mongoose.connection.db?.databaseName}`);

	} catch (err) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:", err.message);
		throw err;
	}
}

// =======================================
// Middleware
// =======================================
app.use(cors());
app.use(express.json({ limit: '10mb' }));
app.use(express.static(path.join(__dirname)));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
	console.log(`${new Date().toISOString()} ${req.method} ${req.path}`);
	next();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ Multer
app.use((error, req, res, next) => {
	if (error instanceof multer.MulterError) {
		if (error.code === 'LIMIT_FILE_SIZE') {
			return res.status(400).json({ error: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å. 5MB)' });
		}
	}
	next(error);
});

// =======================================
// API –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ (MongoDB)
// =======================================

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
app.get("/api/cards", async (req, res) => {
	try {
		console.log("üì• –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ MongoDB");
		const cards = await Card.find().sort({ createdAt: -1 });
		console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${cards.length} –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ MongoDB`);
		res.json(cards);
	} catch (err) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ MongoDB:", err);
		res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫" });
	}
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –û–î–ù–û–ô –∫–∞—Ä—Ç–æ—á–∫–∏
app.post("/api/cards", upload.single('photo'), async (req, res) => {
	console.log("üì¶ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ MongoDB");

	try {
		const { name, price, cost, description, availability } = req.body; // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: cost

		if (!name || !price) {
			return res.status(400).json({ error: "–ù–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
		}

		let imageUrl = '';

		if (req.file) {
			imageUrl = req.file.path;
			console.log("‚úÖ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ Cloudinary:", imageUrl);
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MongoDB!
		const newCard = new Card({
			name: name.toString().trim(),
			price: price.toString().trim(),
			cost: (cost || '').toString().trim(), // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: –ø–æ–ª–µ –∑–∞—Ç—Ä–∞—Ç
			description: (description || '').toString().trim(),
			availability: (availability || '–í –Ω–∞–ª–∏—á–∏–∏').toString().trim(),
			imgSrc: imageUrl
		});

		await newCard.save();
		console.log("‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ MongoDB, ID:", newCard._id);

		res.status(201).json(newCard);
	} catch (err) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ MongoDB:", err);
		res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏" });
	}
});

// –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
app.delete("/api/cards/:id", async (req, res) => {
	const { id } = req.params;

	try {
		if (!mongoose.Types.ObjectId.isValid(id)) {
			return res.status(400).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π ID –∫–∞—Ä—Ç–æ—á–∫–∏" });
		}

		const deletedCard = await Card.findByIdAndDelete(id);

		if (!deletedCard) {
			return res.status(404).json({ error: "–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
		}

		console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ ID: ${id}`);
		res.json({ status: "deleted", id: id });

	} catch (err) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ MongoDB:", err);
		res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏" });
	}
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
app.put("/api/cards/:id", async (req, res) => {
	const { id } = req.params;
	const { availability } = req.body; // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ availability, —Ç–∞–∫ –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –µ–≥–æ

	try {
		if (!mongoose.Types.ObjectId.isValid(id)) {
			return res.status(400).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π ID –∫–∞—Ä—Ç–æ—á–∫–∏" });
		}

		// –ò–°–ü–†–ê–í–õ–ï–ù–û: –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ availability, –µ—Å–ª–∏ –æ–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ
		const updateData = {
			availability: availability || '–í –Ω–∞–ª–∏—á–∏–∏',
			updatedAt: new Date()
		};

		const updatedCard = await Card.findByIdAndUpdate(
			id,
			updateData,
			{ new: true, runValidators: true }
		);

		if (!updatedCard) {
			return res.status(404).json({ error: "–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
		}

		console.log(`‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ ID: ${id}, –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ${availability}`);
		res.json(updatedCard);

	} catch (err) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ MongoDB:", err);
		res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏" });
	}
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ ID
app.get("/api/cards/:id", async (req, res) => {
	const { id } = req.params;

	try {
		if (!mongoose.Types.ObjectId.isValid(id)) {
			return res.status(400).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π ID –∫–∞—Ä—Ç–æ—á–∫–∏" });
		}

		const card = await Card.findById(id);

		if (!card) {
			return res.status(404).json({ error: "–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
		}

		res.json(card);

	} catch (err) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ MongoDB:", err);
		res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏" });
	}
});

// =======================================
// API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –Ω–∞ Cloudinary
// =======================================
app.post("/api/upload", upload.single("photo"), async (req, res) => {
	console.log("üì∏ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ");

	try {
		if (!req.file) {
			console.error("‚ùå –§–∞–π–ª –Ω–µ –ø–æ–ª—É—á–µ–Ω");
			return res.status(400).json({ error: "–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω" });
		}

		console.log("‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω:", req.file.originalname);
		console.log("‚úÖ URL Cloudinary:", req.file.path);

		res.json({
			success: true,
			url: req.file.path,
			message: "–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"
		});

	} catch (err) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:", err);
		res.status(500).json({
			error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ",
			message: err.message
		});
	}
});

// =======================================
// Health check endpoint
// =======================================
app.get("/api/health", async (req, res) => {
	try {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º MongoDB
		await mongoose.connection.db.admin().ping();

		res.json({
			status: "OK",
			mongodb: "connected",
			timestamp: new Date().toISOString()
		});
	} catch (err) {
		res.status(500).json({
			status: "ERROR",
			error: err.message,
			timestamp: new Date().toISOString()
		});
	}
});

// =======================================
// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
// =======================================
app.use((req, res) => {
	console.warn(`‚ö†Ô∏è –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${req.method} ${req.url}`);
	res.status(404).json({ error: "–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
});

// =======================================
// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
// =======================================
app.use((err, req, res, next) => {
	console.error("üî• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:", err);
	res.status(500).json({
		error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
		message: process.env.NODE_ENV === 'development' ? err.message : 'Something went wrong'
	});
});

// =======================================
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
// =======================================
async function startServer() {
	try {
		// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
		await connectMongoDB();

		console.log("‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ");

		// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–¢–†–û–ö–ê
		app.listen(process.env.PORT || PORT, '0.0.0.0', () => {
			console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${process.env.PORT || PORT}`);
			console.log(`üìä Health check: http://localhost:${process.env.PORT || PORT}/api/health`);
		});

	} catch (err) {
		console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä:", err);
		process.exit(1);
	}
}

// =======================================
// Graceful shutdown
// =======================================
async function gracefulShutdown() {
	console.log('\nüîª –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...');

	try {
		// –ó–∞–∫—Ä—ã–≤–∞–µ–º MongoDB
		await mongoose.connection.close();
		console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –∑–∞–∫—Ä—ã—Ç–æ');

		process.exit(0);
	} catch (err) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã:', err);
		process.exit(1);
	}
}

process.on('SIGINT', gracefulShutdown);
process.on('SIGTERM', gracefulShutdown);

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
startServer();
